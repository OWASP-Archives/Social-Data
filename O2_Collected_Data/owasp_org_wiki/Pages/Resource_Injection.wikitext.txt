{{Template:Attack}}
<br>
[[Category:OWASP ASDR Project]]


Last revision (mm/dd/yy): '''{{REVISIONMONTH}}/{{REVISIONDAY}}/{{REVISIONYEAR}}'''

==Description==
This attack consists of changing resource identifiers used by an application in order to perform a malicious task. When an application permits a user input to define a resource, like a file name or port number, this data can be manipulated to execute or access different resources.
<br>
In order to be properly executed, the attacker must have the possibility to specify a resource identifier through the  application form and the application must permit its execution.

The resource type affected by user input indicates the content type that may be exposed. For example, an application that permits input of special characters like period, slash, and backslash is risky when used in methods that interact with the file system.

The resource injection attack focuses on accessing other resources than the local filesystem, which is different attack technique known as a [[Path Manipulation]] attack.<br>

== Risk Factors==
TBD

==Examples ==

===Example 1===
The following examples represent an application which gets a port number from an HTTP request and creates a socket with this port number without any validation. A user using a proxy can modify this port and obtain a direct connection (socket) with the server.
<br><br>

'''Java code:'''

 String rPort = request.getParameter("remotePort");
 ...
 ServerSocket srvr = new ServerSocket(rPort);
 Socket skt = srvr.accept(); 
 ...

<br>
'''.Net code:'''

 int rPort = Int32.Parse(Request.get_Item("remotePort "));
 ...
 IPEndPoint endpoint = new IPEndPoint(address,rPort);
 socket = new Socket(endpoint.AddressFamily, 
 SocketType.Stream, ProtocolType.Tcp);
 socket.Connect(endpoint);
 ...

===Example 2===
This example is same as previous, but it gets port number from CGI requests using C++:

 char* rPort = getenv("remotePort ");
 ...
 serv_addr.sin_port = htons(atoi(rPort));
 if (connect(sockfd,&serv_addr,sizeof(serv_addr)) < 0) 
 error("ERROR connecting");
 ...

===Example 3===
This example in PLSQL / TSQL gets a URL path from a CGI and downloads the file contained in it. If a user modifies the path or filename, itâ€™s possible to download arbitrary files from server:
 ...
 filename := SUBSTR(OWA_UTIL.get_cgi_env('PATH_INFO'), 2);
 WPG_DOCLOAD.download_file(filename); 
 ...

==Related [[Threat Agents]]==
* [[:Category:Logical Attacks]]
* [[:Category: Information Disclosure]]

==Related [[Attacks]]==
* [[Path Traversal]]
* [[Path Manipulation]]
* [[Relative Path Traversal]]
* [[:Category:Injection Attack | Injection Attacks]]

==Related [[Vulnerabilities]]==
* [[:Category:Input Validation Vulnerability]]

==Related [[Controls]]==
* [[:Category:Input Validation]]

==References==
* http://samate.nist.gov/SRD/view_testcase.php?tID=1734
* http://cwe.mitre.org/data/definitions/99.html
* http://capec.mitre.org/data/index.html#Definition
* http://www.fortifysoftware.com/vulncat/
* G. Hoglund and G. McGraw. Exploiting Software. Addison-Wesley, 2004.


[[Category: Injection]]
[[Category: Attack]]