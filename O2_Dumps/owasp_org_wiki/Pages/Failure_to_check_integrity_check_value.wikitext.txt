{{Template:SecureSoftware}}
{{Template:Vulnerability}}

Last revision (mm/dd/yy): '''{{REVISIONMONTH}}/{{REVISIONDAY}}/{{REVISIONYEAR}}'''

[[ASDR_TOC_Vulnerabilities|Vulnerabilities Table of Contents]]

==Description==

If integrity check values or "checksums" are not validated before messages are parsed and used, there is no way of determining if data has been corrupted in transmission.

'''Consequences'''

* Authentication: Integrity checks usually use a secret key that helps authenticate the data origin. Skipping integrity checking generally opens up the possibility that new data from an invalid source can be injected.
* Integrity: Data that is parsed and used may be corrupted.
* Non-repudiation: Without a checksum check, it is impossible to determine if any changes have been made to the data after it was sent.

'''Exposure period'''

* Implementation: Checksums must be properly checked and validated in the implementation of message receiving. 

'''Platform'''

* Languages: All
* Operating platforms: All

'''Required resources'''

Any

'''Severity'''

High

'''Likelihood   of exploit'''

Medium

The failure to validate checksums before use results in an unnecessary risk that can easily be mitigated with very few lines of code. Since the protocol specification describes the algorithm used for calculating the checksum, it is a simple matter of implementing the calculation and verifying that the calculated checksum and the received checksum match. 

If this small amount of effort is skipped, the consequences may be far greater.


==Risk Factors==

TBD


==Examples==

In C/C++:

<pre>
sd = socket(AF_INET, SOCK_DGRAM, 0);
serv.sin_family = AF_INET;
serv.sin_addr.s_addr = htonl(INADDR_ANY);
servr.sin_port = htons(1008);
bind(sd, (struct sockaddr *) & serv, sizeof(serv));
while (1) {
  memset(msg, 0x0, MAX_MSG);
  clilen = sizeof(cli);
  if (inet_ntoa(cli.sin_addr)==...)
  n = recvfrom(sd, msg, MAX_MSG, 0,
              (struct sockaddr *) & cli, &clilen);
}
</pre>

In Java:

<pre>
while(true) {
  DatagramPacket packet 
    = new DatagramPacket(data,data.length,IPAddress, port);
  socket.send(sendPacket);
}
</pre>


==Related [[Attacks]]==

* [[Attack 1]]
* [[Attack 2]]


==Related [[Vulnerabilities]]==

* [[Failure to add integrity check value]]

==Related [[Controls]]==

* Implementation: Ensure that the checksums present in messages are properly checked in accordance with the protocol specification before they are parsed and used. 

==Related [[Technical Impacts]]==

* [[Technical Impact 1]]
* [[Technical Impact 2]]


==References==
TBD

[[Category:FIXME|add links

In addition, one should classify vulnerability based on the following subcategories: Ex:<nowiki>[[Category:Error Handling Vulnerability]]</nowiki>

Availability Vulnerability

Authorization Vulnerability

Authentication Vulnerability

Concurrency Vulnerability

Configuration Vulnerability

Cryptographic Vulnerability

Encoding Vulnerability

Error Handling Vulnerability

Input Validation Vulnerability

Logging and Auditing Vulnerability

Session Management Vulnerability]]

__NOTOC__


[[Category:OWASP ASDR Project]]
[[Category:Vulnerability]]
[[Category:Protocol Errors]]
[[Category:OWASP_CLASP_Project]]