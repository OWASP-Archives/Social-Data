{{Template:Stub}}

Every '''[[Control]]''' should follow this template.

{{Template:Control}}
<br>
[[Category:OWASP ASDR Project]]

Last revision (mm/dd/yy): '''{{REVISIONMONTH}}/{{REVISIONDAY}}/{{REVISIONYEAR}}'''

==Description==

Static Code Analysis (also known as Source Code Analysis) is usually performed as part of a Code Review (also known as white-box testing) and is carried out at the Implementation phase of a Security Development Lifecycle (SDL). Static Code Analysis commonly refers to the running of Static Code Analysis tools that attempt to highlight possible vulnerabilities within 'static' (non-running) source code by using techniques such as Taint Analysis and Data Flow Analysis.

Ideally, such tools would automatically find security flaws with a high degree of confidence that what is found is indeed a flaw. However, this is beyond the state of the art for many types of application security flaws. Thus, such tools frequently serve as aids for an analyst to help them zero in on security relevant portions of code so they can find flaws more efficiently, rather than a tool that simply finds flaws automatically.

Some tools are starting to move into the Integrated Development Environment (IDE). For the types of problems that can be detected during the software development phase itself, this is a powerful phase within the development lifecycle to employ such tools, as it provides immediate feedback to the developer on issues they might be introducing into the code during code development itself. This immediate feedback is very useful as compared to finding vulnerabilities much later in the development cycle.

The UK Defense Standard 00-55 requires that Static Code Analysis be used on all 'safety related software in defense equipment'. [0]

==Techniques==
There are various techniques to analyze static source code for potential vulnerabilities that maybe combined into one solution. These techniques are often derived from compiler technologies.

===Data Flow===
TBD

===Taint Analysis===
Taint Analysis attempts to identify variables that have been 'tainted' with user controllable input and traces them to possible vulnerable functions also known as a 'sink'. If the tainted variable gets passed to a sink without first being sanitized it is flagged as a vulnerability.

==Strengths and Weaknesses==

=== Strengths ===
* Scales Well (Can be run on lots of software, and can be repeatedly (like in nightly builds))
* For things that such tools can automatically find with high confidence, such as buffer overflows, SQL Injection Flaws, etc. they are great.

=== Weaknesses ===
* Many types of security vulnerabilities are very difficult to find automatically, such as authentication problems, access control issues, insecure use of cryptography, etc. The current state of the art only allows such tools to automatically find a relatively small percentage of application security flaws. Tools of this type are getting better, however.
* High numbers of false positives.
* Frequently can't find configuration issues, since they are not represented in the code.
* Difficult to 'prove' that an identified security issue is an actual vulnerability.
* Many of these tools have difficulty analyzing code that can't be compiled. Analysts frequently can't compile code because they don't have the right libraries, all the compilation instructions, all the code, etc.

==Limitations==

===False Positives===
A static code analysis tool will often produce false positive results where the tool reports a possible vulnerability that in fact is not. This often occurs because the tool cannot be sure of the integrity and security of data as it flows through the application from input to output.

False positive results might be reported when analysing an application that interacts with closed source components or external systems because without the source code it is impossible to trace the flow of data in the external system and hence ensure the integrity and security of the data.

===False Negatives===
The use of static code analysis tools can also result in false negative results where vulnerabilities result but the tool does not report them. This might occur if a new vulnerability is discovered in an external component or if the analysis tool has no knowledge of the runtime environment and whether it is configured securely.

==Important Selection Criteria==

* Requirement: Must support your language, but not usually a key factor once it does.
* Types of Vulnerabilities it can detect (The OWASP Top Ten?) (more?)
* Does it require a fully buildable set of source?
* Can it run against binaries instead of source?
* Can it be integrated into the developer's IDE?
* License cost for the tool. (Some are sold per user, per org, per app, per line of code analyzed. Consulting licenses are frequently different than end user licenses.)

==Examples==

===RIPS PHP Static Code Analysis Tool===
[[File:Rips.jpg|400px|thum|]]

===OWASP LAPSE+ Static Code Analysis Tool===
[[File:LapsePlusScreenshot.png|400px|thum|]]

== Tools ==

===OWASP Tools===
* [https://www.owasp.org/index.php/Category:OWASP_Code_Crawler OWASP Code Crawler] (.NET & Java)
* [http://www.owasp.org/index.php/Category:OWASP_Orizon_Project OWASP Orizon Project] (Java,PHP,C & JSP)
* [[OWASP_LAPSE_Project | OWASP LAPSE Project]] (Java)
* [[OWASP O2 Platform]]

=== Open Source/Free ===

*  [http://www.stachliu.com/resources/tools/google-hacking-diggity-project/attack-tools/ Google CodeSearchDiggity] (Multiple)
* [https://www.owasp.org/index.php/OWASP_LAPSE_Project OWASP LAPSE  ] (Java)
* [http://pmd.sourceforge.net/ PMD] (Java)
* [http://www.dwheeler.com/flawfinder/ FlawFinder] (C/C++)
* [http://msdn.microsoft.com/en-us/library/bb429476(v=vs.80).aspx Microsoft FxCop] (.NET)
* [http://www.splint.org Splint] (C)
* [http://findbugs.sourceforge.net/ FindBugs] (Java)
* [http://sourceforge.net/projects/rips-scanner/ RIPS] (PHP)
* [http://sourceforge.net/projects/agnitiotool/ Agnitio] (Objective-C, C#, Java & Android)
* [http://msdn.microsoft.com/en-us/library/ms933794.aspx Microsoft PreFast] (C/C++)
* [https://www.fortify.com/ssa-elements/threat-intelligence/rats.html Fortify RATS] (C, C++, Perl, PHP & Python)

=== Commercial ===

* [https://www.fortify.com/ Fortify] (OWASP Member)
* [http://www.veracode.com/ Veracode] (OWASP Member)
* [http://www.grammatech.com/ GrammaTech]
* [http://www.parasoft.com/jsp/home.jsp ParaSoft]
* [http://www.armorize.com/codesecure/ Armorize CodeSecure] (OWASP Member)
* [http://www.checkmarx.com/ Checkmarx Cx Suite] 
* [http://www-01.ibm.com/software/rational/products/appscan/source/ Rational AppScan Source Edition]
* [http://www.coverity.com/products/static-analysis.html Coverity]
* [http://www.klocwork.com/products/insight.asp Insight]

===Other Tool Lists===

* [http://samate.nist.gov/index.php/Source_Code_Security_Analyzers.html NIST - Source Code Security Analyzers]
* [http://en.wikipedia.org/wiki/List_of_tools_for_static_code_analysis Wikipedia - List of tools for static code analysis]

==References==

[0] Ministry of Defence (MoD). (1997) ''SAFETY RELATED SOFTWARE IN DEFENSE EQUIPMENT'' [Online]. Available at: http://www.software-supportability.org/Docs/00-55_Part_2.pdf (Accessed: 5 January 2012). 

== Further Reading ==

* [https://www.owasp.org/images/2/2e/OWASP_Code_Review_Guide-V1_1.pdf OWASP Code Review Guide v1.1]
* http://www.crosstalkonline.org/storage/issue-archives/2003/200311/200311-German.pdf
* http://www.ida.liu.se/~TDDC90/papers/industrial95.pdf
* http://www.php-security.org/downloads/rips.pdf
* http://www.seclab.tuwien.ac.at/papers/pixy.pdf

[[Category:FIXME|


In addition, one should classify control based on the following subcategories: Ex:<nowiki>[[Category:Error Handling Control]]</nowiki>

Availability Control

Authorization Control

Authentication Control

Concurrency Control

Configuration Control

Cryptographic Control

Encoding Control

Error Handling Control

Input Validation Control

Logging and Auditing Control

Session Management Control
]]
__NOTOC__

[[Category:Control]]